# ┌──────────────────────────────────────────────────────────────────┐
# │  Projects Settings                                               │
# └──────────────────────────────────────────────────────────────────┘

project("raytracing")
cmake_minimum_required(VERSION 3.1)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O3 -g")
set_property(DIRECTORY PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})

# Doing this makes testing easier, NanoGUI example* will all go to ./bin/
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")

if (NOT IS_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/ext/nanogui/include")
  message(FATAL_ERROR "The NanoGUI dependency is missing!  You probably did not "
                      "clone the project with --recursive. It is possible to "
                      "recover by calling\n"
                      "git submodule update --init --recursive")
endif()

# ┌──────────────────────────────────────────────────────────────────┐
# │  Load libraries                                                  │
# └──────────────────────────────────────────────────────────────────┘

# NanoGUI  ------
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(${PROJECT_SOURCE_DIR}/ext/nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# On top of adding the path to nanogui/include, you may need extras
include_directories(${PROJECT_SOURCE_DIR}/ext/nanogui/include)
include_directories(${NANOGUI_EXTRA_INCS})

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# JsonCpp  ------
add_subdirectory(${PROJECT_SOURCE_DIR}/ext/jsoncpp)
include_directories(${PROJECT_SOURCE_DIR}/ext/jsoncpp/include)

# Rtx  ------
add_subdirectory(${PROJECT_SOURCE_DIR}/ext/rtx)
include_directories(${PROJECT_SOURCE_DIR}/ext/rtx/include)

# ┌──────────────────────────────────────────────────────────────────┐
# │  Conan                                                           │
# └──────────────────────────────────────────────────────────────────┘

include(${PROJECT_SOURCE_DIR}/build/conanbuildinfo.cmake)
CONAN_BASIC_SETUP()

# ┌──────────────────────────────────────────────────────────────────┐
# │  Build executable                                                │
# └──────────────────────────────────────────────────────────────────┘

include_directories(${PROJECT_SOURCE_DIR}/include)

file(GLOB_RECURSE ${PROJECT_NAME}_HEADERS ${PROJECT_SOURCE_DIR}/include/*.h)
file(GLOB_RECURSE ${PROJECT_NAME}_SOURCES ${PROJECT_SOURCE_DIR}/src/*.cpp)

add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_HEADERS})

# ┌──────────────────────────────────────────────────────────────────┐
# │  Link Libraries                                                  │
# └──────────────────────────────────────────────────────────────────┘

target_link_libraries(${PROJECT_NAME} nanogui jsoncpp_lib rtx ${CONAN_LIBS})

# ┌──────────────────────────────────────────────────────────────────┐
# │  Copy Assets                                                     │
# └──────────────────────────────────────────────────────────────────┘

file(COPY assets/ DESTINATION bin/assets)