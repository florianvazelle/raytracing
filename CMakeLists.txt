# ┌──────────────────────────────────────────────────────────────────┐
# │  Projects Settings                                               │
# └──────────────────────────────────────────────────────────────────┘

project("raytracing")
cmake_minimum_required(VERSION 3.0.2)

option(RTX_WITH_APP "Compile apps" ON)
option(RTX_WITH_TESTS "Compile rtx tests executable" ON)

option(RTX_WITH_POST_BUILD_UNITTEST
       "Automatically run unit-tests as a post build step" ON)

set(CMAKE_CXX_STANDARD 11)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib")

# ┌──────────────────────────────────────────────────────────────────┐
# │  Build library                                                   │
# └──────────────────────────────────────────────────────────────────┘

# Find source files
file(GLOB_RECURSE ${PROJECT_NAME}_SOURCES ${PROJECT_SOURCE_DIR}/source/*.cpp)
file(GLOB_RECURSE ${PROJECT_NAME}_HEADERS ${PROJECT_SOURCE_DIR}/include/*.h)

# Create shared library
add_library(${PROJECT_NAME} SHARED ${${PROJECT_NAME}_SOURCES}
                                   ${${PROJECT_NAME}_HEADERS})

# Include header files
target_include_directories(${PROJECT_NAME} PUBLIC ${PROJECT_SOURCE_DIR}/include)

target_link_libraries(${PROJECT_NAME} jsoncpp_lib)

# ┌──────────────────────────────────────────────────────────────────┐
# │  Tests                                                           │
# └──────────────────────────────────────────────────────────────────┘

if(RTX_WITH_TESTS)
  if(NOT IS_DIRECTORY
     "${CMAKE_SOURCE_DIR}/external/googletest/googletest/include")
    message(
      FATAL_ERROR
        "The ${dependency} dependency is missing! You probably did not "
        "clone the project with --recursive. It is possible to "
        "recover by calling\n" "git submodule update --init --recursive")
  endif()

  set(BUILD_GMOCK OFF CACHE BOOL " " FORCE)

  add_subdirectory(${PROJECT_SOURCE_DIR}/external/googletest)

  enable_testing()

  include_directories(${gtest_SOURCE_DIR}/include ${gtest_SOURCE_DIR})

  add_subdirectory(test)
endif()

# ┌──────────────────────────────────────────────────────────────────┐
# │  Check submodules                                                │
# └──────────────────────────────────────────────────────────────────┘

find_package(Git QUIET)
if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
# Update submodules as needed
    option(GIT_SUBMODULE "Check submodules during build" ON)
    if(GIT_SUBMODULE)
        message(STATUS "Submodule update")
        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                        RESULT_VARIABLE GIT_SUBMOD_RESULT)
        if(NOT GIT_SUBMOD_RESULT EQUAL "0")
            message(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
        endif()
    endif()
endif()

if(NOT EXISTS "${PROJECT_SOURCE_DIR}/external/jsoncpp/CMakeLists.txt")
    message(FATAL_ERROR "The submodules were not downloaded! GIT_SUBMODULE was turned off or failed. Please update submodules and try again.")
endif()

if(RTX_WITH_APP)
  # ┌──────────────────────────────────────────────────────────────────┐
  # │  Load libraries                                                  │
  # └──────────────────────────────────────────────────────────────────┘

  # NanoGUI  ------
  set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
  set(NANOGUI_BUILD_PYTHON OFF CACHE BOOL " " FORCE)
  set(NANOGUI_INSTALL OFF CACHE BOOL " " FORCE)

  # Add the configurations from nanogui
  add_subdirectory(${PROJECT_SOURCE_DIR}/external/nanogui)

  # For reliability of parallel build, make the NanoGUI targets dependencies
  set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

  # On top of adding the path to nanogui/include, you may need extras
  include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/external/nanogui/include)
  include_directories(SYSTEM ${NANOGUI_EXTRA_INCS})

  # Various preprocessor definitions have been generated by NanoGUI
  add_definitions(${NANOGUI_EXTRA_DEFS})

  # JsonCpp  ------
  set(JSONCPP_WITH_TESTS OFF CACHE BOOL " " FORCE)

  add_subdirectory(${PROJECT_SOURCE_DIR}/external/jsoncpp)
  include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/external/jsoncpp/include)

  # Stb  ------
  include_directories(SYSTEM ${PROJECT_SOURCE_DIR}/external/stb)

  # Cxxopts  ------
  add_subdirectory(${PROJECT_SOURCE_DIR}/external/cxxopts)

  # ┌──────────────────────────────────────────────────────────────────┐
  # │  Add apps                                                        │
  # └──────────────────────────────────────────────────────────────────┘

  # raytracer  ------
  add_subdirectory(${PROJECT_SOURCE_DIR}/app/raytracer)

  # compute  ------
  add_subdirectory(${PROJECT_SOURCE_DIR}/app/compute)
endif()
